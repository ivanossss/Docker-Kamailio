# Flags

# Defined Values
#!define DBURL "mysql://byfly:phaing9Aphaing9A@172.30.252.40/byfly"

####### Global Parameters #########
debug=2
log_stderror=no

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=4

disable_tcp=yes
#auto_aliases=no

alias="172.30.252.30"
listen=udp:172.30.252.30:5060

enable_tls=no
tcp_connection_lifetime=3605

mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

server_header="Server: Iskratel SoftSwitch 4"


# Modules
loadmodule "sl.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "sanity.so"
loadmodule "pv.so"
loadmodule "xlog.so"
loadmodule "siputils.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "permissions.so"
loadmodule "rr.so"
loadmodule "db_mysql.so"
loadmodule "carrierroute.so"
loadmodule "mi_fifo.so"
loadmodule "kex.so"

modparam("tm", "failure_reply_mode", 3)
modparam("tm", "max_noninv_lifetime", 30000)
modparam("tm", "fr_timer", 3000)
;modparam("tm", "fr_inv_timer", 180000)
;modparam("tm", "retr_timer1", 100)
;modparam("tm", "retr_timer2", 100)

modparam("rr", "enable_full_lr", 0)
modparam("rr", "append_fromtag", 0)

modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)

modparam("carrierroute", "match_mode", 128)
modparam("carrierroute", "config_source", "db" )
modparam("carrierroute", "db_url", DBURL)
modparam("carrierroute", "carrierroute_table", "carrierroute")

modparam("mi_fifo", "fifo_name", "/var/run/kamailio/kamailio_fifo")

# Routing Logic
request_route {
    route(REQINIT);
    route(WITHINDLG);

    if(t_precheck_trans()) {
        t_check_trans();
        exit;
    }
    t_check_trans();

    route(AUTH);

    remove_hf("Route");
    if (is_method("INVITE")) {
        record_route();
    }

    if ($rU==$null) {
        sl_send_reply("484","Address Incomplete");
        exit;
    }

    route(CR);
}

route[REQINIT] {
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if(is_method("OPTIONS") && uri==myself && $rU==$null) {
        sl_send_reply("200","Keepalive");
        exit;
    }

    if(!sanity_check("1511", "7")) {
        xlog("L_NOTICE", "Malformed SIP message from $si:$sp\n");
        exit;
    }

}

route[WITHINDLG] {
    if ( !has_totag() ) return;

    if (loose_route()) {
        if ( is_method("NOTIFY") ) {
            record_route();
        }
        route(RELAY);
        exit;
    }

    if ( is_method("ACK") ) {
        if ( t_check_trans() ) {
            route(RELAY);
            exit;
        } else {
            exit;
        }
    }
    sl_send_reply("404","Not here");
    exit;
}

route[AUTH] {
    if( !allow_source_address() ) {
        sl_send_reply("403", "Not allowed");
        exit;
    }
    if ( from_uri!=myself && uri!=myself ) {
        sl_send_reply("403","Not relaying");
        exit;
    }
}

route[CR] {
    if(!cr_route("cc", "main", "$rU", "$rU", "call_id")){
        sl_send_reply("603", "Decline");
    } else {
        t_on_failure("CR");
        t_relay();
    }
}

route[RELAY] {
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

failure_route[CR] {
    revert_uri();
    if (t_check_status("40[0-9]|5[0-9][0-9]")) {
        if(!cr_route("cc", "failover", "$rU", "$rU", "call_id")){
            t_reply("603", "Decline");
        } else {
            t_on_failure("CR2");
            t_relay();
        }
    }
}

failure_route[CR2] {
    revert_uri();
    if (t_check_status("40[0-9]|5[0-9][0-9]")) {
        if(!cr_route("cc", "failover2", "$rU", "$rU", "call_id")){
            t_reply("603", "Decline");
        } else {
            t_on_failure("CR2");
            t_relay();
        }
    }
}